name: Build and Deploy

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  REGION: us-central1
  REPOSITORY: workout-app
  IMAGE: workout-webapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.GCP_PROD_PROJECT_ID }}" >> $GITHUB_ENV
            echo "VITE_API_URL=${{ secrets.PROD_VITE_API_URL }}" >> $GITHUB_ENV
            echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.PROD_VITE_STRIPE_PUBLIC_KEY }}" >> $GITHUB_ENV
            echo "SERVICE_NAME=workout-motivation-webapp" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ secrets.GCP_DEV_PROJECT_ID }}" >> $GITHUB_ENV
            echo "VITE_API_URL=${{ secrets.DEV_VITE_API_URL }}" >> $GITHUB_ENV
            echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.DEV_VITE_STRIPE_PUBLIC_KEY }}" >> $GITHUB_ENV
            echo "SERVICE_NAME=workout-motivation-webapp-dev" >> $GITHUB_ENV
          fi

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          token_format: 'access_token'

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Docker Auth
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build Docker image
        run: |
          docker build \
            --build-arg VITE_STRIPE_PUBLIC_KEY=${{ env.VITE_STRIPE_PUBLIC_KEY }} \
            --build-arg VITE_API_URL=${{ env.VITE_API_URL }} \
            -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} webapp/
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.ENVIRONMENT }}

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.ENVIRONMENT }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --project ${{ env.PROJECT_ID }}

      - name: Notify Deployment Status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ENV="${{ env.ENVIRONMENT }}"
          echo "Deployment to ${ENV} environment: ${STATUS}"
